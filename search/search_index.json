{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"classbase64.html","text":"base64 Public Functions Public Static Functions Output_iterator encode (Input_iterator in_begin, Input_iterator in_end, Output_iterator out, alphabet alphabet=alphabet::normal) Encodes all the elements from in_begin to in_end to out . Warning The source and destination cannot overlap. The destination must be able to hold at least required_encode_size(std::distance(in_begin, in_end)) , otherwise the behavior depends on the output iterator. Template Parameters Input_iterator - the source; the returned elements are cast to std::uint8_t and should not be greater than 8 bits Output_iterator - the destination; the elements written to it are from the type char Parameters in_begin - the beginning of the source in_end - the ending of the source out - the destination iterator alphabet - which alphabet should be used Returns the iterator to the next element past the last element copied Exceptions see - Input_iterator and Output_iterator std::string encode (const std::string &str, alphabet alphabet=alphabet::standard) Encodes a string. Parameters str - the string that should be encoded alphabet - which alphabet should be used Returns the encoded base64 string Exceptions see - base64::encode() std::string encode (const char buffer, std::size_t size, alphabet alphabet=alphabet::standard)* Encodes a char array. Parameters buffer - the char array size - the size of the array alphabet - which alphabet should be used Returns the encoded string Output_iterator decode (Input_iterator in_begin, Input_iterator in_end, Output_iterator out, alphabet alphabet=alphabet::auto_, decoding_behavior behavior=decoding_behavior::moderate) Decodes all the elements from in_begin to in_end to out . in_begin may point to the same location as out , in other words: inplace decoding is possible. Warning The destination must be able to hold at least required_decode_size(std::distance(in_begin, in_end)) , otherwise the behavior depends on the output iterator. Template Parameters Input_iterator - the source; the returned elements are cast to char Output_iterator - the destination; the elements written to it are from the type std::uint8_t Parameters in_begin - the beginning of the source in_end - the ending of the source out - the destination iterator alphabet - which alphabet should be used behavior - the behavior when an error was detected Returns the iterator to the next element past the last element copied Exceptions base64_error - depending on the set behavior see - Input_iterator and Output_iterator std::string decode (const std::string &str, alphabet alphabet=alphabet::auto_, decoding_behavior behavior=decoding_behavior::moderate) Decodes a string. Parameters str - the base64 encoded string alphabet - which alphabet should be used behavior - the behavior when an error was detected Returns the decoded string Exceptions see - base64::decode() std::string decode (const char buffer, std::size_t size, alphabet alphabet=alphabet::auto_, decoding_behavior behavior=decoding_behavior::moderate)* Decodes a string. Parameters buffer - the base64 encoded buffer size - the size of the buffer alphabet - which alphabet should be used behavior - the behavior when an error was detected Returns the decoded string Exceptions see - base64::decode() void decode_inplace (std::string &str, alphabet alphabet=alphabet::auto_, decoding_behavior behavior=decoding_behavior::moderate) Decodes a string inplace. Parameters str - the base64 encoded string alphabet - which alphabet should be used behavior - the behavior when an error was detected Exceptions base64::decode_inplace() - char * decode_inplace (char str, std::size_t size, alphabet alphabet=alphabet::auto_, decoding_behavior behavior=decoding_behavior::moderate)* Decodes a char array inplace. Parameters str - the string array size - the length of the array alphabet - which alphabet should be used behavior - the behavior when an error was detected Returns the pointer to the next element past the last element decoded Exceptions base64::decode_inplace() - std::size_t max_decode_size (std::size_t size) noexcept Returns the required decoding size for a given size. The value is calculated with the following formula: $$ \\lceil \\frac{size}{4} \\rceil \\cdot 3 $$ Parameters size - the size of the encoded input Returns the size of the resulting decoded buffer; this the absolute maximum std::size_t required_encode_size (std::size_t size) noexcept Returns the required encoding size for a given size. The value is calculated with the following formula: $$ \\lceil \\frac{size}{3} \\rceil \\cdot 4 $$ Parameters size - the size of the decoded input Returns the size of the resulting encoded buffer","title":"base64"},{"location":"classbase64.html#base64","text":"","title":"base64"},{"location":"classbase64.html#public-functions","text":"","title":"Public Functions"},{"location":"classbase64.html#public-static-functions","text":"","title":"Public Static Functions"},{"location":"classbase64.html#output_iterator-encode-input_iterator-in_begin-input_iterator-in_end-output_iterator-out-alphabet-alphabetalphabetnormal","text":"Encodes all the elements from in_begin to in_end to out . Warning The source and destination cannot overlap. The destination must be able to hold at least required_encode_size(std::distance(in_begin, in_end)) , otherwise the behavior depends on the output iterator.","title":"Output_iterator encode (Input_iterator in_begin, Input_iterator in_end, Output_iterator out, alphabet alphabet=alphabet::normal)"},{"location":"classbase64.html#template-parameters","text":"Input_iterator - the source; the returned elements are cast to std::uint8_t and should not be greater than 8 bits Output_iterator - the destination; the elements written to it are from the type char","title":"Template Parameters"},{"location":"classbase64.html#parameters","text":"in_begin - the beginning of the source in_end - the ending of the source out - the destination iterator alphabet - which alphabet should be used","title":"Parameters"},{"location":"classbase64.html#returns","text":"the iterator to the next element past the last element copied","title":"Returns"},{"location":"classbase64.html#exceptions","text":"see - Input_iterator and Output_iterator","title":"Exceptions"},{"location":"classbase64.html#stdstring-encode-const-stdstring-str-alphabet-alphabetalphabetstandard","text":"Encodes a string.","title":"std::string encode (const std::string &amp;str, alphabet alphabet=alphabet::standard)"},{"location":"classbase64.html#parameters_1","text":"str - the string that should be encoded alphabet - which alphabet should be used","title":"Parameters"},{"location":"classbase64.html#returns_1","text":"the encoded base64 string","title":"Returns"},{"location":"classbase64.html#exceptions_1","text":"see - base64::encode()","title":"Exceptions"},{"location":"classbase64.html#stdstring-encode-const-char-buffer-stdsize_t-size-alphabet-alphabetalphabetstandard","text":"Encodes a char array.","title":"std::string encode (const char buffer, std::size_t size, alphabet alphabet=alphabet::standard)*"},{"location":"classbase64.html#parameters_2","text":"buffer - the char array size - the size of the array alphabet - which alphabet should be used","title":"Parameters"},{"location":"classbase64.html#returns_2","text":"the encoded string","title":"Returns"},{"location":"classbase64.html#output_iterator-decode-input_iterator-in_begin-input_iterator-in_end-output_iterator-out-alphabet-alphabetalphabetauto_-decoding_behavior-behaviordecoding_behaviormoderate","text":"Decodes all the elements from in_begin to in_end to out . in_begin may point to the same location as out , in other words: inplace decoding is possible. Warning The destination must be able to hold at least required_decode_size(std::distance(in_begin, in_end)) , otherwise the behavior depends on the output iterator.","title":"Output_iterator decode (Input_iterator in_begin, Input_iterator in_end, Output_iterator out, alphabet alphabet=alphabet::auto_, decoding_behavior behavior=decoding_behavior::moderate)"},{"location":"classbase64.html#template-parameters_1","text":"Input_iterator - the source; the returned elements are cast to char Output_iterator - the destination; the elements written to it are from the type std::uint8_t","title":"Template Parameters"},{"location":"classbase64.html#parameters_3","text":"in_begin - the beginning of the source in_end - the ending of the source out - the destination iterator alphabet - which alphabet should be used behavior - the behavior when an error was detected","title":"Parameters"},{"location":"classbase64.html#returns_3","text":"the iterator to the next element past the last element copied","title":"Returns"},{"location":"classbase64.html#exceptions_2","text":"base64_error - depending on the set behavior see - Input_iterator and Output_iterator","title":"Exceptions"},{"location":"classbase64.html#stdstring-decode-const-stdstring-str-alphabet-alphabetalphabetauto_-decoding_behavior-behaviordecoding_behaviormoderate","text":"Decodes a string.","title":"std::string decode (const std::string &amp;str, alphabet alphabet=alphabet::auto_, decoding_behavior behavior=decoding_behavior::moderate)"},{"location":"classbase64.html#parameters_4","text":"str - the base64 encoded string alphabet - which alphabet should be used behavior - the behavior when an error was detected","title":"Parameters"},{"location":"classbase64.html#returns_4","text":"the decoded string","title":"Returns"},{"location":"classbase64.html#exceptions_3","text":"see - base64::decode()","title":"Exceptions"},{"location":"classbase64.html#stdstring-decode-const-char-buffer-stdsize_t-size-alphabet-alphabetalphabetauto_-decoding_behavior-behaviordecoding_behaviormoderate","text":"Decodes a string.","title":"std::string decode (const char buffer, std::size_t size, alphabet alphabet=alphabet::auto_, decoding_behavior behavior=decoding_behavior::moderate)*"},{"location":"classbase64.html#parameters_5","text":"buffer - the base64 encoded buffer size - the size of the buffer alphabet - which alphabet should be used behavior - the behavior when an error was detected","title":"Parameters"},{"location":"classbase64.html#returns_5","text":"the decoded string","title":"Returns"},{"location":"classbase64.html#exceptions_4","text":"see - base64::decode()","title":"Exceptions"},{"location":"classbase64.html#void-decode_inplace-stdstring-str-alphabet-alphabetalphabetauto_-decoding_behavior-behaviordecoding_behaviormoderate","text":"Decodes a string inplace.","title":"void decode_inplace (std::string &amp;str, alphabet alphabet=alphabet::auto_, decoding_behavior behavior=decoding_behavior::moderate)"},{"location":"classbase64.html#parameters_6","text":"str - the base64 encoded string alphabet - which alphabet should be used behavior - the behavior when an error was detected","title":"Parameters"},{"location":"classbase64.html#exceptions_5","text":"base64::decode_inplace() -","title":"Exceptions"},{"location":"classbase64.html#char-decode_inplace-char-str-stdsize_t-size-alphabet-alphabetalphabetauto_-decoding_behavior-behaviordecoding_behaviormoderate","text":"Decodes a char array inplace.","title":"char * decode_inplace (char str, std::size_t size, alphabet alphabet=alphabet::auto_, decoding_behavior behavior=decoding_behavior::moderate)*"},{"location":"classbase64.html#parameters_7","text":"str - the string array size - the length of the array alphabet - which alphabet should be used behavior - the behavior when an error was detected","title":"Parameters"},{"location":"classbase64.html#returns_6","text":"the pointer to the next element past the last element decoded","title":"Returns"},{"location":"classbase64.html#exceptions_6","text":"base64::decode_inplace() -","title":"Exceptions"},{"location":"classbase64.html#stdsize_t-max_decode_size-stdsize_t-size-noexcept","text":"Returns the required decoding size for a given size. The value is calculated with the following formula: $$ \\lceil \\frac{size}{4} \\rceil \\cdot 3 $$","title":"std::size_t max_decode_size (std::size_t size) noexcept"},{"location":"classbase64.html#parameters_8","text":"size - the size of the encoded input","title":"Parameters"},{"location":"classbase64.html#returns_7","text":"the size of the resulting decoded buffer; this the absolute maximum","title":"Returns"},{"location":"classbase64.html#stdsize_t-required_encode_size-stdsize_t-size-noexcept","text":"Returns the required encoding size for a given size. The value is calculated with the following formula: $$ \\lceil \\frac{size}{3} \\rceil \\cdot 4 $$","title":"std::size_t required_encode_size (std::size_t size) noexcept"},{"location":"classbase64.html#parameters_9","text":"size - the size of the decoded input","title":"Parameters"},{"location":"classbase64.html#returns_8","text":"the size of the resulting encoded buffer","title":"Returns"},{"location":"classbase64__error.html","text":"base64_error Public Functions Public Static Functions","title":"base64_error"},{"location":"classbase64__error.html#base64_error","text":"","title":"base64_error"},{"location":"classbase64__error.html#public-functions","text":"","title":"Public Functions"},{"location":"classbase64__error.html#public-static-functions","text":"","title":"Public Static Functions"}]}